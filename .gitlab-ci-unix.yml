# TODO: The bad touching needs to be solved in the build system, but
#       maybe there's a way to automate it with needs?
#       Build the various sbbs libraries separately as well.

spec:
  inputs:
    os:
    platform:
    tagname:
    cross_platform:
      default: 'no'
    build_flags:
      default: 'RELEASE=1'
    has_javascript:
      default: 'yes'
    has_curses:
      default: 'yes'
    has_gtk:
      default: 'no'
    gnu_make:
      default: 'gmake'
    has_valgrind:
      default: 'no'
    has_graphics:
      default: 'yes'
    build_doors:
      default: 'no'
---

".$[[ inputs.os ]]":
  extends: .rules
  tags:
    - "$[[ inputs.tagname ]]"

".$[[ inputs.os ]]-build":
  stage: build
  extends: .$[[ inputs.os ]]

".$[[ inputs.os ]]-test":
  stage: test
  extends: .$[[ inputs.os ]]

".$[[ inputs.os ]]-cleanup":
  stage: cleanup
  extends: .$[[ inputs.os ]]

###########
# Bundles #
###########
# These are artifact-only builds

"$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz"
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "sbbs-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/*.exe.release/*"
      - "src/sbbs3/*.lib.release/*"
      - "src/sbbs3/*/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
  rules:
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - !reference [.rules, rules]

############
# Binaries #
############
# These link a runnable binary

"$[[ inputs.os ]]-$[[ inputs.platform ]] [gtkchat]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/sbbs3/gtkchat
    - touch cl
    - touch depend
    - touch encode
    - touch hash
    - touch smblib
    - touch xpdev
    - touch xpdev-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "gtkchat-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/gtkchat/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
  rules:
    - if: '"$[[ inputs.has_gtk ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [gtkmonitor]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/spidermonkey.tgz"
    - cd src/sbbs3/gtkmonitor
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch smblib
    - touch cl
    - touch js
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "gtkmonitor-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/gtkmonitor/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [spidermonkey]"
  rules:
    - if: '"$[[ inputs.has_gtk ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [gtkuseredit]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/spidermonkey.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz"
    - cd src/sbbs3/gtkuseredit
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch smblib
    - touch cl
    - touch js
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "gtkuseredit-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/gtkuseredit/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [spidermonkey]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
  rules:
    - if: '"$[[ inputs.has_gtk ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [gtkuserlist]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz"
    - cd src/sbbs3/gtkuserlist
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch smblib
    - touch cl
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "gtkuserlist-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/gtkuserlist/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
  rules:
    - if: '"$[[ inputs.has_gtk ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [jsdoor]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/spidermonkey.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs${EXTRA_FILENAME}-build.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/gitinfo.tgz"
    - cd src/sbbs3
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch smblib
    - touch uifc
    - touch uifc-mt
    - touch ciolib-mt
    - touch encode
    - touch hash
    - touch smblib
    - touch cl
    - touch scfg/xpdev-mt
    - touch scfg/uifc-mt
    - touch scfg/ciolib-mt
    - touch scfg/smblib
    - touch scfg/encode
    - touch scfg/hash
    - touch scfg/cl
    - touch uedit/smblib
    - touch uedit/uifc-mt
    - touch uedit/ciolib-mt
    - touch uedit/xpdev-mt
    - touch umonitor/ciolib-mt
    - touch umonitor/uifc-mt
    - touch umonitor/xpdev-mt
    - touch umonitor/smblib
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS jsdoor
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/jsdoor.tgz" src/sbbs3/*.exe.release/jsdoor
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    expire_in: 30 mins
    name: "jsdoor-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/*.exe.release/jsdoor"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [spidermonkey]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [gitinfo]"
  rules:
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/spidermonkey.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sftp.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/gitinfo.tgz"
    - cd src/sbbs3
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch smblib
    - touch uifc
    - touch uifc-mt
    - touch ciolib-mt
    - touch encode
    - touch hash
    - touch smblib
    - touch sftp-mt
    - touch cl
    - touch scfg/xpdev-mt
    - touch scfg/uifc-mt
    - touch scfg/ciolib-mt
    - touch scfg/smblib
    - touch scfg/encode
    - touch scfg/hash
    - touch scfg/cl
    - touch uedit/smblib
    - touch uedit/uifc-mt
    - touch uedit/ciolib-mt
    - touch uedit/xpdev-mt
    - touch umonitor/ciolib-mt
    - touch umonitor/uifc-mt
    - touch umonitor/xpdev-mt
    - touch umonitor/smblib
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS GIT=NO all
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz" src/sbbs3/*.exe.release* src/sbbs3/*.obj.release*/*.o* src/sbbs3/*.lib.release/* src/sbbs3/*/*.exe.release/*
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ctrl_exec${EXTRA_FILENAME}.tgz" ctrl exec
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [spidermonkey]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sftp]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [gitinfo]"
  rules:
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [scfg]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/gitinfo.tgz"
    - cd src/sbbs3/scfg
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch encode
    - touch hash
    - touch smblib
    - touch ciolib-mt
    - touch uifc
    - touch uifc-mt
    - touch cl
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS GIT=NO
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/scfg.tgz" src/sbbs3/scfg/*.exe.release* src/sbbs3/scfg/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [gitinfo]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [sexpots]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/sexpots
    - touch cl
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "sexpots-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sexpots/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [syncdraw]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/syncdraw
    - touch cl
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch ciolib-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "syncdraw-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/syncdraw/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [syncterm]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sftp.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/syncterm
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch encode
    - touch hash
    - touch ciolib-mt
    - touch uifc
    - touch uifc-mt
    - touch sftp-mt
    - touch cl
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "syncterm-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/syncterm/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sftp]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [syncterm-cmake]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/syncterm
    - mkdir build
    - cd build
    - cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DFIXED_FIXED_SEED=ON ..
    - cmake --build .
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "syncterm-cmake-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/syncterm/build/syncterm*"
  rules:
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - !reference [.rules, rules]
  needs:

"$[[ inputs.os ]]-$[[ inputs.platform ]] [syncview]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/sbbs3/syncview
    - touch ciolib-mt
    - touch cl
    - touch depend
    - touch encode
    - touch hash
    - touch xpdev
    - touch xpdev-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "syncview-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/sbbs3/syncview/*.exe.release/*"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
  rules:
    - if: '"$[[ inputs.has_graphics ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [uedit]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/gitinfo.tgz"
    - cd src/sbbs3/uedit
    - touch cl
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch encode
    - touch hash
    - touch smblib
    - touch ciolib-mt
    - touch uifc
    - touch uifc-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS GIT=NO
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uedit.tgz" src/sbbs3/uedit/*.exe.release* src/sbbs3/uedit/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [gitinfo]"
  rules:
    - if: '"$[[ inputs.has_curses ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [umonitor]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/sbbs3/umonitor
    - touch cl
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch encode
    - touch hash
    - touch smblib
    - touch ciolib-mt
    - touch uifc
    - touch uifc-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/umonitor.tgz" src/sbbs3/umonitor/*.exe.release* src/sbbs3/umonitor/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [utils]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/gitinfo.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/sbbs3
    - touch cl
    - touch depend
    - touch xpdev
    - touch xpdev-mt
    - touch encode
    - touch hash
    - touch smblib
    - touch ciolib-mt
    - touch uifc
    - touch uifc-mt
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS GIT=NO standalone-utils
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/utils.tgz" src/sbbs3/*.exe.release* src/sbbs3/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [gitinfo]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"

#############
# Libraries #
#############
# These perform a make, but do not result in a runnable binary

"$[[ inputs.os ]]-$[[ inputs.platform ]] [ciolib]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/conio
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ciolib.tgz" src/conio/*.lib.release* src/conio/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd 3rdp/build
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] FIXED_FIXED_SEED=1 $BUILD_ARGS cryptlib
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz" 3rdp/*.release/cl
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [encode]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/encode
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/encode.tgz" src/encode/*.lib.release* src/encode/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [gitinfo]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/sbbs3
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS gitinfo
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/gitinfo.tgz" src/sbbs3/git_*.h
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [hash]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/hash
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/hash.tgz" src/hash/*.lib.release* src/hash/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [odoors]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/odoors
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/odoors.tgz" src/odoors/libs-* src/odoors/*.h src/odoors/FILE_ID.DIZ src/odoors/*.TXT src/odoors/*.txt
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [sftp]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/sftp
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sftp.tgz" src/sftp/*.lib.release* src/sftp/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [smblib]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd src/smblib
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/smblib.tgz" src/smblib/*.lib.release* src/smblib/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch

"$[[ inputs.os ]]-$[[ inputs.platform ]] [spidermonkey]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - cd 3rdp/build
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS libmozjs
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/spidermonkey.tgz" 3rdp/*.*.*.release/mozjs
  variables:
    GIT_STRATEGY: fetch
  rules:
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] [uifc]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - cd src/uifc
    - touch cl
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/uifc.tgz" src/uifc/*.lib.release* src/uifc/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"

"$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/cryptlib.tgz"
    - cd src/xpdev
    - touch cl
    - touch depend
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
    - mkdir -p "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
    - cd ../..
    - tar -czf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz" src/xpdev/*.lib.release* src/xpdev/*.obj.release*/*.o*
  variables:
    GIT_STRATEGY: fetch
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [cryptlib]"

#########
# Doors #
#########

"$[[ inputs.os ]]-$[[ inputs.platform ]] [dgnlance]":
  extends:
    - .$[[ inputs.os ]]-build
  script:
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/odoors.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/xpdev.tgz"
    - cd src/doors/dgnlance
    - touch depend
    - touch xpdev
    - touch odoors
    - $[[ inputs.gnu_make ]] $[[ inputs.build_flags ]] $BUILD_ARGS
  variables:
    GIT_STRATEGY: fetch
  artifacts:
    name: "dgnlance-$[[ inputs.os ]]-$[[ inputs.platform ]]"
    paths:
      - "src/doors/dgnlance/data"
      - "src/doors/dgnlance/dgnlnce*"
      - "src/doors/dgnlance/lib.*"
      - "src/doors/dgnlance/text"
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [odoors]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [xpdev]"
  rules:
    - if: '"$[[ inputs.build_doors ]]" == "no"'
      when: never
    - !reference [.rules, rules]

#########
# Tests #
#########

"$[[ inputs.os ]]-$[[ inputs.platform ]] jsexec-testsuite":
  extends:
    - .$[[ inputs.os ]]-test
  script:
    - rm -rf ci-test
    - mkdir ci-test
    - cd ci-test
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ctrl_exec${EXTRA_FILENAME}.tgz"
    - "SBBSCTRL=./ctrl src/sbbs3/*.exe.release/jsexec -S -f exec/tests/test.js"
    - cd ..
    - rm -rf ci-test
  variables:
    GIT_STRATEGY: none
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
      artifacts: false
  rules:
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] jsexec-testsuite-valgrind":
  extends:
    - .$[[ inputs.os ]]-test
  script:
    - rm -rf ci-test
    - mkdir ci-test
    - cd ci-test
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/sbbs-build${EXTRA_FILENAME}.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ctrl_exec${EXTRA_FILENAME}.tgz"
    - "SBBSCTRL=./ctrl valgrind --leak-check=full --error-exitcode=1 --num-callers=20 --track-origins=yes --read-var-info=yes --read-inline-info=yes --suppressions=../src/sbbs3/suppressions.vg src/sbbs3/*.exe.release/jsexec -S -f exec/tests/test.js"
    - cd ..
    - rm -rf ci-test
  variables:
    GIT_STRATEGY: none
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
      artifacts: false
  rules:
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - if: '"$[[ inputs.has_valgrind ]]" == "no"'
      when: never
    - !reference [.rules, rules]

"$[[ inputs.os ]]-$[[ inputs.platform ]] jsdoor-testsuite":
  extends:
    - .$[[ inputs.os ]]-test
  script:
    - rm -rf ci-test
    - mkdir ci-test
    - cd ci-test
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/jsdoor.tgz"
    - tar -xvzf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}/ctrl_exec${EXTRA_FILENAME}.tgz"
    - "SBBSCTRL=./ctrl src/sbbs3/*.exe.release/jsdoor -S -f exec/tests/test.js"
    - cd ..
    - rm -rf ci-test
  variables:
    GIT_STRATEGY: none
  needs:
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [sbbs-build]"
    - job: "$[[ inputs.os ]]-$[[ inputs.platform ]] [jsdoor]"
      artifacts: false
  rules:
    - if: '"$[[ inputs.cross_platform ]]" == "yes"'
      when: never
    - if: '"$[[ inputs.has_javascript ]]" == "no"'
      when: never
    - !reference [.rules, rules]

###########
# Cleanup #
###########

"$[[ inputs.os ]]-$[[ inputs.platform ]] cleanup":
  extends:
    - .$[[ inputs.os ]]-cleanup
  script:
    - rm -rf "/tmp/gitlab-runner/$[[ inputs.os ]]-$[[ inputs.platform ]]-${CI_PIPELINE_ID}"
  variables:
    GIT_STRATEGY: none
  dependencies: []
  when: always
