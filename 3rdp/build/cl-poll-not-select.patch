diff -ur ../cl-old/io/tcp_rw.c ./io/tcp_rw.c
--- ../cl-old/io/tcp_rw.c	2021-03-21 07:25:22.336553000 -0400
+++ ./io/tcp_rw.c	2021-03-21 08:02:40.609845000 -0400
@@ -20,6 +20,10 @@
 
 #ifdef USE_TCP
 
+#ifndef __WINDOWS__
+#include <poll.h>
+#endif
+
 /****************************************************************************
 *																			*
 *							Network I/O Wait Management						*
@@ -74,6 +78,7 @@
 		{ CRYPT_ERROR_OPEN, "unknown" }, { CRYPT_ERROR_OPEN, "unknown" }
 		};
 	MONOTIMER_INFO timerInfo;
+#ifdef __WINDOWS__
 	struct timeval tv;
 	fd_set readfds, writefds, exceptfds;
 	fd_set *readFDPtr = ( type == IOWAIT_READ || \
@@ -81,6 +86,10 @@
 						  type == IOWAIT_ACCEPT ) ? &readfds : NULL;
 	fd_set *writeFDPtr = ( type == IOWAIT_WRITE || \
 						   type == IOWAIT_CONNECT ) ? &writefds : NULL;
+#else
+	struct pollfd fds;
+	int ptimeout;
+#endif
 	int selectIterations, status, LOOP_ITERATOR;
 
 	assert( isWritePtr( netStream, sizeof( NET_STREAM_INFO ) ) );
@@ -152,6 +161,20 @@
 	status = setMonoTimer( &timerInfo, timeout );
 	if( cryptStatusError( status ) )
 		return( status );
+
+#ifndef __WINDOWS__
+	fds.fd = netStream->netSocket;
+	fds.events = 0;
+	if (type == IOWAIT_READ || type == IOWAIT_CONNECT || type == IOWAIT_ACCEPT )
+		fds.events |= POLLIN;
+	if (type == IOWAIT_WRITE || type == IOWAIT_CONNECT )
+		fds.events |= POLLOUT;
+	if (timeout <= 0)
+		ptimeout = 5;
+	else
+		ptimeout = timeout * 1000;
+#endif
+
 	LOOP_MED( ( selectIterations = 0, status = SOCKET_ERROR ), \
 			  isSocketError( status ) && \
 				( selectIterations <= 0 || \
@@ -159,6 +182,7 @@
 				selectIterations < 20, 
 			  selectIterations++ )
 		{
+#ifdef __WINDOWS__
 		if( readFDPtr != NULL )
 			{
 			FD_ZERO( readFDPtr );
@@ -186,6 +210,10 @@
 		clearErrorState();
 		status = select( ( int ) netStream->netSocket + 1, readFDPtr, 
 						 writeFDPtr, &exceptfds, &tv );
+#else
+		fds.revents = 0;
+		status = poll(&fds, 1, ptimeout);
+#endif
 
 		/* If there's a problem and it's not something transient like an
 		   interrupted system call, exit.  For a transient problem, we just
@@ -269,7 +297,11 @@
 	   false and an indicator to receive SIGURG's not set, the OOB data byte 
 	   just languishes in a side-buffer), however we shouldn't be receiving 
 	   OOB data so we treat that as an error too */
+#ifdef __WINDOWS__
 	if( FD_ISSET( netStream->netSocket, &exceptfds ) )
+#else
+	if (fds.revents | (POLLERR | POLLNVAL))
+#endif
 		{
 		int socketErrorCode;
 
@@ -323,6 +355,7 @@
 
 	/* The socket is read for reading or writing */
 	ENSURES( status > 0 );
+#ifdef __WINDOWS__
 	ENSURES( ( type == IOWAIT_READ && \
 			   FD_ISSET( netStream->netSocket, &readfds ) ) || \
 			 ( type == IOWAIT_WRITE && \
@@ -331,6 +364,13 @@
 			   ( FD_ISSET( netStream->netSocket, &readfds ) || \
 				 FD_ISSET( netStream->netSocket, &writefds ) ) ) || \
 			 ( type == IOWAIT_ACCEPT ) );
+#else
+	ENSURES( \
+			 ( type == IOWAIT_READ && (fds.revents & POLLIN) ) || \
+			 ( type == IOWAIT_WRITE && (fds.revents & POLLOUT) ) || \
+			 ( type == IOWAIT_CONNECT && (fds.revents & (POLLIN | POLLOUT) ) ) || \
+			 ( type == IOWAIT_ACCEPT ) );
+#endif
 	return( CRYPT_OK );
 	}
 
Only in ./tools: endian
