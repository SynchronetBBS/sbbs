--- ./session/ssh.c.orig	2023-05-06 19:14:38.000000000 -0400
+++ ./session/ssh.c	2023-12-31 09:34:51.773416000 -0500
@@ -561,6 +561,19 @@
 							   attributeListPtr->valueLength ) );
 		}
 #ifdef USE_SSH_EXTENDED
+	if( type == CRYPT_SESSINFO_SSH_OPTIONS )
+		{
+			int *valuePtr = ( int * ) data;
+
+			*valuePtr = CRYPT_SSHOPTION_NONE;
+			if( TEST_FLAG( sessionInfoPtr->protocolFlags, 
+						   SSH_PFLAG_DUMMYUSERAUTH ) )
+				*valuePtr |= CRYPT_SSHOPTION_NONE_AUTH;
+
+			return( CRYPT_OK );
+		}
+
+
 	if( type == CRYPT_SESSINFO_SSH_CHANNEL || \
 		type == CRYPT_SESSINFO_SSH_CHANNEL_ACTIVE )
 		{
@@ -596,6 +609,7 @@
 			  type == CRYPT_SESSINFO_SSH_CHANNEL_ARG1 || \
 			  type == CRYPT_SESSINFO_SSH_CHANNEL_ARG2 || \
 			  type == CRYPT_SESSINFO_SSH_CHANNEL_ACTIVE || \
+			  type == CRYPT_SESSINFO_SSH_OPTIONS || \
 			  type == CRYPT_SESSINFO_SSH_PREAUTH );
 #else
 	REQUIRES( type == CRYPT_SESSINFO_SSH_PREAUTH );
@@ -613,7 +627,8 @@
 #ifdef USE_SSH_EXTENDED
 	/* Get the data value if it's an integer parameter */
 	if( type == CRYPT_SESSINFO_SSH_CHANNEL || \
-		type == CRYPT_SESSINFO_SSH_CHANNEL_ACTIVE )
+		type == CRYPT_SESSINFO_SSH_CHANNEL_ACTIVE || \
+		type == CRYPT_SESSINFO_SSH_OPTIONS )
 		value = *( ( int * ) data );
 
 	/* If we're selecting a channel and there's unwritten data from a
@@ -647,6 +662,13 @@
 		return( createChannel( sessionInfoPtr ) );
 		}
 
+	if( type == CRYPT_SESSINFO_SSH_OPTIONS )
+		{
+		if (value & CRYPT_SSHOPTION_NONE_AUTH)
+			SET_FLAG( sessionInfoPtr->protocolFlags, SSH_PFLAG_DUMMYUSERAUTH );
+		return( CRYPT_OK );
+		}
+
 	/* If we 're setting the channel-active attribute, this implicitly
 	   activates or deactivates the channel rather than setting any
 	   attribute value */
@@ -776,8 +798,6 @@
 		 SESSION_PROTOCOL_FIXEDSIZECREDENTIALS,	/* Flags */
 		SSH_PORT,					/* SSH port */
 		SESSION_NEEDS_USERID |		/* Client attributes */
-			SESSION_NEEDS_PASSWORD | \
-			SESSION_NEEDS_KEYORPASSWORD | \
 			SESSION_NEEDS_PRIVKEYSIGN,
 				/* The client private key is optional, but if present it has
 				   to be signature-capable */
--- ./cryptlib.h.orig	2023-12-31 09:28:53.203654000 -0500
+++ ./cryptlib.h	2023-12-31 09:38:13.586441000 -0500
@@ -1262,6 +1262,7 @@
 	CRYPT_SESSINFO_SSH_CHANNEL_ARG2,/* SSH channel argument 2 */
 	CRYPT_SESSINFO_SSH_CHANNEL_ACTIVE,/* SSH channel active */
 	CRYPT_SESSINFO_SSH_PREAUTH,		/* SSH pre-authentication value */
+	CRYPT_SESSINFO_SSH_OPTIONS,		/* SSH protocol options */
 	CRYPT_SESSINFO_TLS_OPTIONS,		/* SSL/TLS protocol options */
 		CRYPT_SESSINFO_SSL_OPTIONS = CRYPT_SESSINFO_TLS_OPTIONS,
 	CRYPT_SESSINFO_TLS_SUBPROTOCOL,	/* SSL/TLS additional sub-protocol */
@@ -1762,6 +1763,14 @@
 #define CRYPT_TLSOPTION_SUITEB_256			0x200	/*  vanish in future releases) */
 #ifdef _CRYPT_DEFINED
 #define CRYPT_TLSOPTION_MAX					0x07F	/* Defines for range checking */
+#endif /* _CRYPT_DEFINED */
+
+/* SSH protocol options. */
+
+#define CRYPT_SSHOPTION_NONE				0x000
+#define CRYPT_SSHOPTION_NONE_AUTH			0x001	/* Try none authentication */
+#ifdef _CRYPT_DEFINED
+#define CRYPT_SSHOPTION_MAX					0x01	/* Defines for range checking */
 #endif /* _CRYPT_DEFINED */
 
 /****************************************************************************
--- ./kernel/attr_acl.c.orig	2023-12-31 09:39:13.241750000 -0500
+++ ./kernel/attr_acl.c	2023-12-31 09:40:15.337914000 -0500
@@ -3883,6 +3883,12 @@
 		ST_NONE, ST_NONE, ST_SESS_SSH | ST_SESS_SSH_SVR,
 		MKPERM_SSH( Rxx_RWD ),
 		ROUTE( OBJECT_TYPE_SESSION ), RANGE( 2, CRYPT_MAX_TEXTSIZE ) ),
+	MKACL_N(	/* SSH protocol options */
+		CRYPT_SESSINFO_SSH_OPTIONS,
+		ST_NONE, ST_NONE, ST_SESS_SSH, 
+		MKPERM_SESSIONS( Rxx_RWx ),
+		ROUTE( OBJECT_TYPE_SESSION ),
+		RANGE( CRYPT_SSHOPTION_NONE, CRYPT_SSHOPTION_MAX ) ),
 
 	MKACL_N(        /* TLS protocol options */
 		CRYPT_SESSINFO_TLS_OPTIONS,
@@ -4883,7 +4889,7 @@
 	static_assert( CRYPT_CERTINFO_FIRST_EXTENSION == 2200, "Attribute value" );
 	static_assert( CRYPT_CERTINFO_FIRST_CMS == 2500, "Attribute value" );
 	static_assert( CRYPT_SESSINFO_FIRST_SPECIFIC == 6017, "Attribute value" );
-	static_assert( CRYPT_SESSINFO_LAST_SPECIFIC == 6035, "Attribute value" );
+	static_assert( CRYPT_SESSINFO_LAST_SPECIFIC == 6036, "Attribute value" );
 	static_assert( CRYPT_CERTFORMAT_LAST == 13, "Attribute value" );
 
 	/* Perform a consistency check on the attribute ACLs.  The ACLs are
--- ./session/ssh2_authcli.c.orig	2023-12-31 09:44:20.876065000 -0500
+++ ./session/ssh2_authcli.c	2023-12-31 09:46:41.813246000 -0500
@@ -334,13 +334,22 @@
 	assert( isWritePtr( authType, sizeof( SSH_AUTHTYPE_TYPE ) ) );
 	assert( isWritePtr( furtherAuthRequired, sizeof( BOOLEAN ) ) );
 
-	REQUIRES( isShortIntegerRangeNZ( length ) );
 	REQUIRES( isBooleanValue( usedPasswordAuth ) );
 
 	/* Clear return values */
 	*authType = SSH_AUTHTYPE_NONE;
 	*furtherAuthRequired = FALSE;
 
+	if (length == 0 && GET_FLAG( sessionInfoPtr->protocolFlags, SSH_PFLAG_DUMMYUSERAUTH ) && !usedPasswordAuth)
+		{
+		CLEAR_FLAG( sessionInfoPtr->protocolFlags, SSH_PFLAG_DUMMYUSERAUTH );
+		*furtherAuthRequired = TRUE;
+		*authType = SSH_AUTHTYPE_PASSWORD;
+		return( CRYPT_OK );
+		}
+
+	REQUIRES( isShortIntegerRangeNZ( length ) );
+
 	/* Before we can try and interpret the response, we have to check for an
 	   empty response */
 	if( length >= LENGTH_SIZE && \
@@ -671,6 +680,8 @@
 								  SSH_MSG_USERAUTH_REQUEST );
 	if( cryptStatusError( status ) )
 		return( status );
+	if (passwordPtr == NULL && GET_FLAG( sessionInfoPtr->protocolFlags, SSH_PFLAG_DUMMYUSERAUTH ))
+		return( OK_SPECIAL );
 	if( usePasswordAuth )
 		{
 		/*	byte	type = SSH_MSG_USERAUTH_REQUEST
@@ -1251,6 +1262,11 @@
 	   auth required */
 	if( !hasPassword )
 		{
+		if (length == 0)
+			{
+			return( reportAuthFailure( sessionInfoPtr, SSH_AUTHTYPE_PASSWORD, 
+									   requiredAuthType, TRUE ) );
+			}
 		return( reportAuthFailure( sessionInfoPtr, SSH_AUTHTYPE_PUBKEY, 
 								   requiredAuthType, TRUE ) );
 		}
