--- session/session.h.orig	2024-02-22 21:46:07.919870000 -0500
+++ session/session.h	2024-02-22 21:54:28.395535000 -0500
@@ -370,6 +370,14 @@
 	BUFFER_FIXED( KEYID_SIZE ) \
 	BYTE authUserNameHash[ KEYID_SIZE + 8 ];/* Hashed userID */
 	/* SSH_AUTHTYPE_TYPE */ int authType;	/* Authentication method */
+
+	/* If a header is only partially read, cryptlib takes a shit because
+	   it's in a local variable.  Store it in the session data instead.
+	   Note, we can't use LENGTH_SIZE or MIN_PACKET_SIZE as in the original
+	   since it's defined with two different values in tls.h and ssh.h.
+	   Just hard-coding 20 here (LENGTH_SIZE + MIN_PACKET_SIZE per ssh.h). */
+	BUFFER_FIXED( 20 ) \
+	BYTE headerBuffer[ 20 + 8 ];
 	} SSH_INFO;
 #endif /* USE_SSH */
 
--- session/ssh2_rd.c.orig	2023-06-15 04:35:42.000000000 -0400
+++ session/ssh2_rd.c	2024-02-22 21:57:48.805525000 -0500
@@ -407,7 +407,6 @@
 							const SSH_PROTOSTATE_TYPE protocolState )
 	{
 	STREAM stream;
-	BYTE headerBuffer[ LENGTH_SIZE + MIN_PACKET_SIZE + 8 ];
 	const BOOLEAN isHandshake = \
 			( protocolState == SSH_PROTOSTATE_HANDSHAKE  || \
 			  protocolState == SSH_PROTOSTATE_AUTH ) ? TRUE : FALSE;
@@ -460,13 +459,13 @@
 		   conditions due to buggy SSH implementations, to handle these we
 		   check the return code as well as the returned data to see if we
 		   need to process it specially */
-		status = readFixedHeaderAtomic( sessionInfoPtr, headerBuffer, 
+		status = readFixedHeaderAtomic( sessionInfoPtr, sshInfo->headerBuffer, 
 										headerByteCount );
 		if( status == CRYPT_ERROR_READ || cryptStatusOK( status ) )
 			{
 			const int localStatus = \
 				checkHandshakePacketStatus( sessionInfoPtr, status, 
-											headerBuffer, headerByteCount, 
+											sshInfo->headerBuffer, headerByteCount, 
 											expectedType );
 			if( cryptStatusError( localStatus ) )
 				status = localStatus;
@@ -474,11 +473,11 @@
 		}
 	else
 		{
-		status = readFixedHeader( sessionInfoPtr, headerBuffer, 
-								  headerByteCount );
+		status = readFixedHeader( sessionInfoPtr, sshInfo->headerBuffer, 
+								  headerByteCount );
 		}
 	if( cryptStatusError( status ) )
 		return( status );
 
 	/* If we're in the data-processing stage (i.e. it's a post-handshake
 	   data packet read) exception conditions need to be handled specially 
@@ -500,8 +499,8 @@
 	   of the message we decrypt */
 	if( isSecureRead )
 		{
-		void *payloadPtr = useETM ? headerBuffer + LENGTH_SIZE : \
-									headerBuffer;
+		void *payloadPtr = useETM ? sshInfo->headerBuffer + LENGTH_SIZE : \
+									sshInfo->headerBuffer;
 
 		/* If we're using EtM then we have to preserve a copy of the 
 		   ciphertext so that we can MAC it later */
@@ -541,7 +540,7 @@
 			larger than the (remaining) data that we've already read.  For
 			this case we need to check that the data payload is at least as
 			long as the minimum-length packet */
-	sMemConnect( &stream, headerBuffer, headerByteCount );
+	sMemConnect( &stream, sshInfo->headerBuffer, headerByteCount );
 	status = length = readUint32( &stream );
 	static_assert( SSH_HEADER_REMAINDER_SIZE == MIN_PACKET_SIZE - \
 												LENGTH_SIZE, \
@@ -598,8 +597,8 @@
 	   from the stream above but have to manually extract it here */
 	static_assert( LENGTH_SIZE + 1 + ID_SIZE <= MIN_PACKET_SIZE,
 				   "Header length calculation" );
-	sshInfo->padLength = headerBuffer[ LENGTH_SIZE ];
-	sshInfo->packetType = headerBuffer[ LENGTH_SIZE + 1 ];
+	sshInfo->padLength = sshInfo->headerBuffer[ LENGTH_SIZE ];
+	sshInfo->packetType = sshInfo->headerBuffer[ LENGTH_SIZE + 1 ];
 	if( sshInfo->padLength < SSH2_MIN_PADLENGTH_SIZE || \
 		sshInfo->padLength > 255 ) 
 		{
